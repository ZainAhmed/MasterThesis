//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI {
    /**
     Cancel a ongoing requested ride
     - parameter body: (body) Ride request information 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelRidePost(body: RideCancellationInput, completion: @escaping ((_ data: RideCancellationResponse?,_ error: Error?) -> Void)) {
        cancelRidePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel a ongoing requested ride
     - POST /cancelRide
     - Cancel a ongoing ride which was requested earlier by providing the ride id.
     - examples: [{contentType=application/json, example={
  "status" : "canceled"
}}]
     - parameter body: (body) Ride request information 

     - returns: RequestBuilder<RideCancellationResponse> 
     */
    open class func cancelRidePostWithRequestBuilder(body: RideCancellationInput) -> RequestBuilder<RideCancellationResponse> {
        let path = "/cancelRide"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RideCancellationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Request a Ride
     - parameter body: (body) Ride request information 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func requestRidePost(body: RideInput, completion: @escaping ((_ data: RideRequest?,_ error: Error?) -> Void)) {
        requestRidePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Request a Ride
     - POST /requestRide
     - A requested ride comes and picks you, while fulfilling your ride request preferences.
     - examples: [{contentType=application/json, example={
  "vehicle_id" : "abc12",
  "status" : "pending",
  "num_plate" : "AA 592",
  "origin_name" : "PontWall",
  "destination_name" : "Deutsche Bank",
  "model" : "Golf",
  "color" : "Yellow",
  "driver_number" : "123456789",
  "walking_time_to_destination" : "3",
  "walking_time_to_pickup" : "2",
  "pick_up" : {
    "lat" : 50.781584,
    "lng" : 6.077761,
    "address" : "Malteserstras√üe"
  },
  "drop_off" : {
    "lat" : 50.773629,
    "lng" : 6.087018,
    "address" : "Elisenbrunnen, Aachen"
  }
}}]
     - parameter body: (body) Ride request information 

     - returns: RequestBuilder<RideRequest> 
     */
    open class func requestRidePostWithRequestBuilder(body: RideInput) -> RequestBuilder<RideRequest> {
        let path = "/requestRide"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RideRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     returns ride's current location
     - parameter body: (body) An object which contains the vehicle&#x27;s id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rideLocationPost(body: RideLocationInput, completion: @escaping ((_ data: RideLocationResponse?,_ error: Error?) -> Void)) {
        rideLocationPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     returns ride's current location
     - POST /rideLocation
     - The API would return the current location of the ride when the request is made
     - examples: [{contentType=application/json, example={
  "lat" : 50.781584,
  "lng" : 6.077761
}}]
     - parameter body: (body) An object which contains the vehicle&#x27;s id 

     - returns: RequestBuilder<RideLocationResponse> 
     */
    open class func rideLocationPostWithRequestBuilder(body: RideLocationInput) -> RequestBuilder<RideLocationResponse> {
        let path = "/rideLocation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RideLocationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Schedule a Ride
     - parameter body: (body) Ride request information 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func scheduleRidePost(body: RideInput, completion: @escaping ((_ data: ScheduledRideRequest?,_ error: Error?) -> Void)) {
        scheduleRidePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Schedule a Ride
     - POST /scheduleRide
     - Scheduling a ride, while fulfilling your ride request preferences.
     - examples: [{contentType=application/json, example={
  "status" : "scheduled"
}}]
     - parameter body: (body) Ride request information 

     - returns: RequestBuilder<ScheduledRideRequest> 
     */
    open class func scheduleRidePostWithRequestBuilder(body: RideInput) -> RequestBuilder<ScheduledRideRequest> {
        let path = "/scheduleRide"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ScheduledRideRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
